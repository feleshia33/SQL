
This query combines two tables of data to show country code, country name, year, and fertility rate per country. Aliases are used for each table.

-- Select fields 
SELECT code, name, region, year, fertility_rate
-- From countries (alias as c)
  FROM countries as c
-- Join to populations (as p)
  INNER JOIN populations as p
-- Match on country code 
  ON c.code = p.country_code



This query combines three tables of data to show the country code, name, region, year, fertility rate, and unemployment rate for each country. Aliases are used for each table and identifier. 

-- Select fields
SELECT c.code, name, region, e.year, fertility_rate, unemployment_rate
-- From countries (alias as c)
  FROM countries AS c
-- Join to populations (as p)
  INNER JOIN populations AS p
-- Match on country code
    ON c.code = p.country_code
-- Join to economies (as e)
  INNER JOIN economies AS e
-- Match on country code and year
    ON c.code = e.code
    AND p.year = e.year;



This query combines two tables with USING. Aliases are used for each table and identifier.

-- Select fields with aliases
SELECT c.name as country, c.continent, l.name as language, l.official
-- From countries (alias as c)
  FROM countries c
-- Join to languages (as l)
  INNER JOIN languages l
-- Match on code utilizing using
  USING (code)



This query is a self-join that queries the size of each country and categorizes it by year, 2010 and 2015 respectively. 

-- Select fields with aliases
SELECT p1.country_code, p1.size as size2010, p2.size as size2015
-- From populations (alias as p1)
  FROM populations p1
-- Join to itself (alias as p2)
  JOIN populations p2
-- Match on country code
  ON p1.country_code = p2.country_code


This query joins two tables using aliases. The growth percentage from 2010 to 2015 is calculated based on country codes and year.

-- Select fields with aliases
SELECT p1.country_code,
       p1.size AS size2010, 
       p2.size AS size2015,
       -- Calculate growth_perc
       ((p2.size - p1.size)/p1.size * 100.0) AS growth_perc
-- From populations (alias as p1)
FROM populations AS p1
-- Join to itself (alias as p2)
  INNER JOIN populations AS p2
-- Match on country code
    ON p1.country_code = p2.country_code
-- and year (with calculation)
        AND p1.year = p2.year - 5;



This query uses a case statement that takes the country's surface area a categorizes it by large, medium, and small.

SELECT name, continent, code, surface_area,
-- First case
    CASE WHEN surface_area > 2000000 THEN 'large'
-- Second case
        WHEN surface_area > 350000 THEN 'medium'
-- Else clause + end
        ELSE 'small' END
-- Alias name
        AS geosize_group
-- From table
FROM countries; 



This query uses a case statement that takes the country's surface area a categorizes it by large, medium, and small for the year 2015.

SELECT country_code, size,
    -- First case
    CASE WHEN size > 50000000 THEN 'large'
        -- Second case
        WHEN size > 1000000 THEN 'medium'
        -- Else clause + end
        ELSE 'small' END
        -- Alias name (popsize_group)
        AS popsize_group
-- From table
FROM populations
-- Focus on 2015
WHERE year = 2015;


-This query is the same as above but creates pop_plus to save the query. 

SELECT country_code, size,
    CASE WHEN size > 50000000 THEN 'large'
        WHEN size > 1000000 THEN 'medium'
        ELSE 'small' END
        AS popsize_group
-- Into table
INTO pop_plus
FROM populations
WHERE year = 2015;

-- Select all columns of pop_plus
SELECT * FROM pop_plus;

-This query displays countries by population size using small, medium, and large using a case statement and joins two data tables.



SELECT country_code, size,
  CASE WHEN size > 50000000
            THEN 'large'
       WHEN size > 1000000
            THEN 'medium'
       ELSE 'small' END
       AS popsize_group
INTO pop_plus       
FROM populations
WHERE year = 2015;


SELECT name, continent, geosize_group, popsize_group
-- From countries_plus (alias as c)
FROM countries_plus as c
  -- Join to pop_plus (alias as p)
  JOIN pop_plus as p
    -- Match on country code
    ON c.code = p.country_code
-- Order the table    
Order by geosize_group asc;
















--Data Set can be viewed here after login (free): https://app.datacamp.com/learn/courses/sql-for-joining-data 







